generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          RoleTypes    @default(USER)
  accounts      Account[]
  BlogPost      BlogPosts[]
  DislikeLog    DislikeLog[]
  LikeLog       LikeLog[]
  sessions      Session[]
  ViewLog       ViewLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPosts {
  id         String       @id @default(cuid())
  blogTitle  String?
  blogPost   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  userId     String
  pageViews  Int          @default(0)
  likes      Int          @default(0)
  private    Boolean      @default(false)
  draft      Boolean      @default(false)
  user       User         @relation(fields: [userId], references: [id])
  DislikeLog DislikeLog[]
  likeLogs   LikeLog[]
  viewLogs   ViewLog[]
}

model ViewLog {
  id        Int       @id @default(autoincrement())
  postId    String
  ipAddress String
  createdAt DateTime  @default(now())
  userId    String?
  BlogPost  BlogPosts @relation(fields: [postId], references: [id])
  User      User?     @relation(fields: [userId], references: [id])
}

model LikeLog {
  id        String    @id @default(cuid())
  postId    String
  ipAddress String
  createdAt DateTime  @default(now())
  userId    String
  BlogPost  BlogPosts @relation(fields: [postId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model DislikeLog {
  id        String    @id @default(cuid())
  postId    String
  ipAddress String
  userId    String
  createdAt DateTime  @default(now())
  BlogPost  BlogPosts @relation(fields: [postId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

enum RoleTypes {
  USER
  ADMIN
}
